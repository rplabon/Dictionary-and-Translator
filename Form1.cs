using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Text.RegularExpressions;
using System.Globalization;
using System.Net;
using Newtonsoft.Json;

namespace Rabiul_Google_dictionary
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void showMeaning(string json)
        {
            Data d = new Data();
            d = JsonConvert.DeserializeObject<Data>(json);
            //MessageBox.Show(d.Dict[0].Entry[0].Reverse_translation[0]);

            string meaning = "";// "<div style=\"border: 2px solid black;\">";

            for (int i = 0; i < d.Dict.Length; i++)
            {
                meaning += "<font color=\"red\">" + d.Dict[i].Pos + ": " + "</font>";

                for (int j = 0; j < d.Dict[i].Terms.Length; j++)
                {
                    meaning += d.Dict[i].Terms[j] + ", ";
                }
                meaning += "<ul>";

                for (int j = 0; j < d.Dict[i].Entry.Length; j++)
                {
                    meaning += "<li>" + d.Dict[i].Entry[j].Word + ": ";

                    if (d.Dict[i].Entry[j].Reverse_translation != null)
                    {
                        for (int k = 0; k < d.Dict[i].Entry[j].Reverse_translation.Length; k++)
                        {
                            meaning += "<font color=\"blue\">" + d.Dict[i].Entry[j].Reverse_translation[k] + ", " + "</font>";
                        }
                    }
                    meaning += "</li>";
                }
                meaning += "</ul>";

            }
            //meaning += "</div>";
            webBrowser1.DocumentText = meaning;
           

        }

        private void wordTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            Regex rx = new Regex(@"\\[uU]([0-9A-F]{4})");
            string json = "";
            string word = wordTextBox.Text.Trim();

            if (e.KeyChar == (char)13)
            {
                using (WebClient wc = new WebClient())
                {
                    json = wc.DownloadString("http://translate.google.com/translate_a/t?client=j&text=" + word + "&hl=en&sl=en&tl=bn");
                }
               
               
                json = rx.Replace(json, delegate(Match match) { return ((char)Int32.Parse(match.Value.Substring(2), NumberStyles.HexNumber)).ToString(); });
                MessageBox.Show(json);
                showMeaning(json);
               
            }
        }
    }

    // Json Mapping Automatically Generated By JsonToolkit Library for C#
    // Diego Trinciarelli 2011
    // To use this code you will need to reference Newtonsoft's Json Parser, downloadable from codeplex.
    // http://json.codeplex.com/



    [Serializable]
    class Data
    {

        public Sentence[] Sentences;
        public Dict[] Dict;
        public string Src;
        public int Server_time;

        //Empty Constructor
        public Data() { }

        public string Serialize()
        {
            return JsonConvert.SerializeObject(this);
        }
        public static Data FromJson(string json)
        {
            return JsonConvert.DeserializeObject<Data>(json);
        }
    }


    [Serializable]
    class Sentence
    {

        public string Trans;
        public string Orig;
        public string Translit;
        public string Src_translit;

        //Empty Constructor
        public Sentence() { }

    }


    [Serializable]
    class Entry
    {

        public string Word;
        public string[] Reverse_translation;
        public double Score;

        //Empty Constructor
        public Entry() { }

    }


    [Serializable]
    class Dict
    {

        public string Pos;
        public string[] Terms;
        public Entry[] Entry;

        //Empty Constructor
        public Dict() { }

    }
}
